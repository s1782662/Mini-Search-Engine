replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"")

replace(/\s{2,}/g," ");

var s = "This., -/ is #! an $ % ^ & * example ;: {} of a = -_ string with `~)() punctuation";
var punctuationless = s.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"");
var finalString = punctuationless.replace(/\s{2,}/g," ");



defaultdict(<type 'list'>, {'pink': [('5', [0])], 'drinkand': [('2', [0])], '\nthe': [('3', [2]), ('4', [0, 0])], '\nhe': [('1', [1]), ('2', [2, 2]), ('5', [4, 4]), ('5', [4, 4])], 'drink\n': [('1', [2]), ('2', [3, 3])], 'thing': [('3', [0])], 'drink': [('2', [1]), ('3', [3, 3]), ('4', [2, 2]), ('4', [2, 2]), ('5', [3, 3]), ('5', [3, 3]), ('5', [3, 3]), ('5', [3, 3])], 'wink': [('1', [0]), ('5', [1, 1])], 'ink\n': [('3', [1]), ('5', [2, 2])], 'pink\n': [('4', [3])], 'ink': [('4', [1])]})


{'pink': [('4', [0]), ('5', [0, 0])], 'drinkand': [('2', [0])], '\nthe': [('3', [1]), ('4', [1, 1])], '\nhe': [('1', [2]), ('2', [2, 2]), ('5', [3, 3]), ('5', [3, 3])], 'thing': [('3', [0])], 'drink': [('1', [1]), ('2', [1, 1]), ('3', [2, 2]), ('3', [2, 2]), ('4', [2, 2]), ('4', [2, 2]), ('4', [2, 2]), ('4', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2])], 'wink': [('1', [0]), ('5', [1, 1])], 'ink': [('3', [3]), ('4', [3, 3]), ('5', [4, 4]), ('5', [4, 4])]})



{'pink': [('4', [0]), ('5', [0, 0])], 'drinkand': [('2', [0])], 'thing': [('3', [0])], 'drink': [('1', [1]), ('2', [1, 1]), ('3', [1, 1]), ('3', [1, 1]), ('4', [1, 1]), ('4', [1, 1]), ('4', [1, 1]), ('4', [1, 1]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2]), ('5', [2, 2])], 'wink': [('1', [0]), ('5', [1, 1])], 'ink': [('3', [2]), ('4', [2, 2]), ('5', [3, 3]), ('5', [3, 3])]})



[(0, 'wink'), (1, 'drink')]
[(0, 'drinkand'), (1, 'drink')]
[(0, 'thing'), (1, 'drink'), (2, 'ink')]
[(0, 'pink'), (1, 'drink'), (2, 'ink')]
[(0, 'pink'), (1, 'wink'), (2, 'drink'), (3, 'ink')]



[(0, ''), (1, 'wink'), (2, 'drink')]
[(0, ''), (1, 'drink')]
[(0, 'thing'), (1, 'drink'), (2, 'ink')]
[(0, 'pink'), (1, 'drink'), (2, 'ink')]
[(0, ''), (1, 'wink'), (2, 'pink'), (3, 'drink'), (4, 'ink')]



[(0, 'wink'), (1, 'drink')]
[(0, 'drink')]
[(0, 'thing'), (1, 'drink'), (2, 'ink')]
[(0, 'pink'), (1, 'drink'), (2, 'ink')]
[(0, 'pink'), (1, 'wink'), (2, 'drink'), (3, 'ink')]




[(0, 'to'), (1, 'he'), (2, 'drink'), (3, 'like'), (4, 'wink')]
[(0, 'and'), (1, 'drink')]
[(0, 'thing'), (1, 'drink'), (2, 'ink')]
[(0, 'pink'), (1, 'drink'), (2, 'ink')]
[(0, 'pink'), (1, 'wink'), (2, 'drink'), (3, 'ink')]




[(0, 'wink'), (1, 'drink')]
[(0, 'drink'), (1, 'drink'), (2, 'drink')]
[(0, 'thing'), (1, 'drink'), (2, 'ink')]
[(0, 'ink'), (1, 'drink'), (2, 'pink')]
[(0, 'wink'), (1, 'drink'), (2, 'pink'), (3, 'ink')]



He likes to wink, he likes to drink

He likes to drink , and drink,and drink

The thing he likes to drink is ink

The ink he likes to drink is pink

He likes to wink, and drink pink ink













filter (
      lambda x:re.match("^[\w]+$",x),
      [x for x in set(re.split("[\s:/,.:]",yourString))

   ]

)

